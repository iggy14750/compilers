/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
 */

//*
// Apply the java plugin to add support for Java
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://xbib.org/repository"
        }
    }
}
// apply plugin: 'org.xbib.gradle.plugin.jflex'
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
allprojects {
    repositories {
        // Use 'jcenter' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'

    // JavaCUP Parser Generator
    // compile 'edu.princeton.cup:java-cup:10k'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    compile files('bin')

    // Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'
    compile 'org.mockito:mockito-core:1.10.19'
}

task buildLex() {
    // workingDir '$projectDir'
    // if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    //     commandLine 'cmd', '/c', 'jflex', '--nobak', '-d', 'src/main/java/frontend/', 'src/main/jflex/minijava.flex'
    // } else {
    //     commandLine 'sh', '-c', 'jflex', '--nobak', '-d', 'src/main/java/frontend/', 'src/main/jflex/minijava.flex'
    // }
    doLast {
        exec {
            executable 'cd'
        }
    }
}

task echo(type: Exec) {
    workingDir '$projectDir'
    commandLine 'echo', 'worked!'
}

//assemble.dependsOn buildLex
// task buildCup(type: Exec) {
//     workingDir '$projectDir'
//     commandLine 'java', '-jar', 'storage/java-cup-11b.jar', '-destdir', 'src/main/java/frontend', '-parser', 'Parser', 'src/main/cup/minijava.cup'
// }
// assemble.dependsOn buildCup
//*/