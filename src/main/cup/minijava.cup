
package frontend;

import java_cup.runtime.*;
import syntaxtree.*;
import java.io.File;
import java.io.FileReader;
import java.io.StringReader;

parser code {:
    Scanner s;
    public Parser(Lexer l) {
        s = l;
    }

    public static Object parse(String s) throws Exception {
        return new Parser(new Lexer(new StringReader(s))).parse().value;
    }

    public static Object parse(File f) throws Exception {
        return new Parser(new Lexer(new FileReader(f))).parse().value;
    }
:}

scan with {: return s.next_token(); :};


terminal CLASS, PUBLIC, STATIC, VOID, MAIN, EXTENDS;
terminal RETURN, IF, WHILE, ELSE, SYSOUT, LENGTH, INT_T, BOOLEAN_T, STRING_T;
terminal LEFT_CURLY, RIGHT_CURLY, LEFT_PAREN, RIGHT_PAREN, LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal COMMA, SEMICOLON, DOT, BANG, AND, OR, EQ, EQEQ, LESS_THAN, PLUS, MINUS, TIMES, DIVIDE;
terminal THIS, NEW, FALSE, TRUE;
terminal Integer INT;
terminal String STRING;
terminal String ID;


non terminal Exp expr;
non terminal Identifier id;
non terminal ExpList exp_list;

precedence left BANG;
precedence left DOT;

start with expr;

expr ::=
    expr:i DOT LENGTH {:
        RESULT = new ArrayLength(i);
    :}
    | expr:e DOT id:i LEFT_PAREN exp_list:l RIGHT_PAREN {:
        RESULT = new Call(e, i, l);
    :}
    | INT:i {:
        RESULT = new IntegerLiteral(i);
    :}
    | TRUE {:
        RESULT = new True();
    :}
    | FALSE {:
        RESULT = new False();
    :}
    | id:i {:
        RESULT = new IdentifierExp(i.toString());
    :}
    | THIS {:
        RESULT = new This();
    :}
    | NEW INT_T LEFT_SQUARE_BRACKET expr:e RIGHT_SQUARE_BRACKET {:
        RESULT = new NewArray(e);
    :}
    | NEW id:i LEFT_PAREN RIGHT_PAREN {:
        RESULT = new NewObject(i);
    :}
    | BANG expr:e {:
        RESULT = new Not(e);
    :}
    | LEFT_PAREN expr:e RIGHT_PAREN {:
        RESULT = e;
    :}
;

exp_list ::=
    exp_list:l COMMA expr:e {:
        l.addElement(e);
        RESULT = l;
    :}
    | expr:e {:
        ExpList l = new ExpList();
        l.addElement(e);
        RESULT = l;
    :}
;

id ::=
    ID:i {:
        RESULT = new Identifier(i);
    :}
;