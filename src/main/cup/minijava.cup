
package frontend;

import java_cup.runtime.*;
import syntaxtree.*;
import java.io.File;
import java.io.FileReader;
import java.io.StringReader;

parser code {:
    Scanner s;
    public Parser(Lexer l) {
        s = l;
    }

    public static Object parse(String s) throws Exception {
        return new Parser(new Lexer(new StringReader(s))).parse().value;
    }

    public static Object parse(File f) throws Exception {
        return new Parser(new Lexer(new FileReader(f))).parse().value;
    }
:}

scan with {: return s.next_token(); :};


terminal CLASS, PUBLIC, STATIC, VOID, MAIN, EXTENDS;
terminal RETURN, IF, WHILE, ELSE, SYSOUT, LENGTH, INT_T, BOOLEAN_T;
terminal LEFT_CURLY, RIGHT_CURLY, LEFT_PAREN, RIGHT_PAREN, LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal COMMA, SEMICOLON, DOT, BANG, AND, OR, EQ, EQEQ, LESS_THAN, PLUS, MINUS, TIMES, DIVIDE;
terminal THIS, NEW, FALSE, TRUE;
terminal Integer INT;
terminal String STRING;
terminal String ID;

non terminal Statement stmt;
non terminal StatementList stmt_list;
non terminal Exp expr;
non terminal Identifier id;
non terminal ExpList exp_list;
non terminal Type type;
non terminal VarDecl var_decl;
non terminal VarDeclList var_decl_list;
non terminal Formal formal;
non terminal FormalList formal_list;
non terminal MethodDecl method;

precedence left AND;
precedence left LESS_THAN;
precedence left PLUS, MINUS;
precedence left BANG, TIMES;
precedence right DOT, LEFT_SQUARE_BRACKET;

start with method;

method ::=
    PUBLIC type:ret_type id:name LEFT_PAREN formal_list:params RIGHT_PAREN LEFT_CURLY 
        var_decl_list:decls
        stmt_list:stmts
        RETURN expr:ret_val SEMICOLON 
    RIGHT_CURLY {:
        RESULT = new MethodDecl(ret_type, name, params, decls, stmts, ret_val);
    :}
;

formal_list ::=
    formal_list:list COMMA formal:f {:
        list.addElement(f);
        RESULT = list;
    :}
    | formal:f {:
        FormalList list = new FormalList();
        list.addElement(f);
        RESULT = list;
    :}
;

formal ::=
    type:t id:i {:
        RESULT = new Formal(t, i);
    :}
;

var_decl_list ::=
    var_decl_list:list var_decl:var {:
        list.addElement(var);
        RESULT = list;
    :}
    | var_decl:var {:
        VarDeclList list = new VarDeclList();
        list.addElement(var);
        RESULT = list;
    :}
;

var_decl ::=
    type:t id:i SEMICOLON {:
        RESULT = new VarDecl(t, i);
    :}
;

type ::=
    INT_T LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET {:
        RESULT = new IntArrayType();
    :}
    | BOOLEAN_T {:
        RESULT = new BooleanType();
    :}
    | INT_T {:
        RESULT = new IntegerType();
    :}
    | id:i {:
        RESULT = new IdentifierType(i.toString());
    :}
;

stmt ::=
    LEFT_CURLY stmt_list:l RIGHT_CURLY {:
        RESULT = new Block(l);
    :}
    | IF LEFT_PAREN expr:cond RIGHT_PAREN stmt:given ELSE stmt:other {:
        RESULT = new If(cond, given, other);
    :}
    | WHILE LEFT_PAREN expr:cond RIGHT_PAREN stmt:body {:
        RESULT = new While(cond, body);
    :}
    | SYSOUT LEFT_PAREN expr:e RIGHT_PAREN SEMICOLON {:
        RESULT = new Print(e);
    :}
    | id:i EQ expr:e SEMICOLON {:
        RESULT = new Assign(i, e);
    :}
    | id:i LEFT_SQUARE_BRACKET expr:index RIGHT_SQUARE_BRACKET EQ expr:value SEMICOLON {:
        RESULT = new ArrayAssign(i, index, value);
    :}
;

expr ::=
    expr:e1 AND expr:e2 {:
        RESULT = new And(e1, e2);
    :}
    | expr:e1 LESS_THAN expr:e2 {:
        RESULT = new LessThan(e1, e2);
    :}
    | expr:e1 PLUS expr:e2 {:
        RESULT = new Plus(e1, e2);
    :}
    | expr:e1 MINUS expr:e2 {:
        RESULT = new Minus(e1, e2);
    :}
    | expr:e1 TIMES expr:e2 {:
        RESULT = new Times(e1, e2);
    :}
    | expr:array LEFT_SQUARE_BRACKET expr:index RIGHT_SQUARE_BRACKET {:
        RESULT = new ArrayLookup(array, index);
    :}
    | expr:i DOT LENGTH {:
        RESULT = new ArrayLength(i);
    :}
    | expr:e DOT id:i LEFT_PAREN exp_list:l RIGHT_PAREN {:
        RESULT = new Call(e, i, l);
    :}
    | INT:i {:
        RESULT = new IntegerLiteral(i);
    :}
    | TRUE {:
        RESULT = new True();
    :}
    | FALSE {:
        RESULT = new False();
    :}
    | id:i {:
        RESULT = new IdentifierExp(i.toString());
    :}
    | THIS {:
        RESULT = new This();
    :}
    | NEW INT_T LEFT_SQUARE_BRACKET expr:e RIGHT_SQUARE_BRACKET {:
        RESULT = new NewArray(e);
    :}
    | NEW id:i LEFT_PAREN RIGHT_PAREN {:
        RESULT = new NewObject(i);
    :}
    | BANG expr:e {:
        RESULT = new Not(e);
    :}
    | LEFT_PAREN expr:e RIGHT_PAREN {:
        RESULT = e;
    :}
;

stmt_list ::=
    stmt_list:l stmt:s {:
        l.addElement(s);
        RESULT = l;
    :}
    | stmt:s {:
        StatementList l = new StatementList();
        l.addElement(s);
        RESULT = l;
    :}
;

exp_list ::=
    exp_list:l COMMA expr:e {:
        l.addElement(e);
        RESULT = l;
    :}
    | expr:e {:
        ExpList l = new ExpList();
        l.addElement(e);
        RESULT = l;
    :}
;

id ::=
    ID:i {:
        RESULT = new Identifier(i);
    :}
;