
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MipsParse extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MipsParse() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MipsParse(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MipsParse(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\004\004\000\002\003\010" +
    "\000\002\003\010\000\002\003\011\000\002\003\004\000" +
    "\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\006\007\007\010\005\001\002\000\012\002" +
    "\026\007\007\010\005\012\024\001\002\000\012\002\ufff8" +
    "\007\ufff8\010\ufff8\012\ufff8\001\002\000\012\002\uffff\007" +
    "\uffff\010\uffff\012\uffff\001\002\000\006\011\010\013\011" +
    "\001\002\000\004\004\012\001\002\000\012\002\ufff9\007" +
    "\ufff9\010\ufff9\012\ufff9\001\002\000\006\011\013\013\014" +
    "\001\002\000\004\004\020\001\002\000\004\005\015\001" +
    "\002\000\004\011\016\001\002\000\004\006\017\001\002" +
    "\000\012\002\ufffa\007\ufffa\010\ufffa\012\ufffa\001\002\000" +
    "\006\011\021\013\022\001\002\000\012\002\ufffc\007\ufffc" +
    "\010\ufffc\012\ufffc\001\002\000\012\002\ufffb\007\ufffb\010" +
    "\ufffb\012\ufffb\001\002\000\012\002\ufffe\007\ufffe\010\ufffe" +
    "\012\ufffe\001\002\000\006\007\007\010\005\001\002\000" +
    "\012\002\000\007\000\010\000\012\000\001\002\000\004" +
    "\002\001\001\002\000\012\002\ufffd\007\ufffd\010\ufffd\012" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\006\002\003\003\005\001\001\000\006\003" +
    "\024\004\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MipsParse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MipsParse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MipsParse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    public MipsParse(MipsLex s) {
        this.s = s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MipsParse$actions {
  private final MipsParse parser;

  /** Constructor */
  CUP$MipsParse$actions(MipsParse parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MipsParse$do_action_part00000000(
    int                        CUP$MipsParse$act_num,
    java_cup.runtime.lr_parser CUP$MipsParse$parser,
    java.util.Stack            CUP$MipsParse$stack,
    int                        CUP$MipsParse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MipsParse$result;

      /* select the action based on the action number */
      switch (CUP$MipsParse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inst_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).value;
		RESULT = start_val;
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MipsParse$parser.done_parsing();
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inst_list ::= inst_list inst 
            {
              List<Instruction> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).right;
		List<Instruction> il = (List<Instruction>)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$MipsParse$stack.peek()).value;
		 
        il.add(e);
        RESULT = il;
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("inst_list",0, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inst_list ::= inst 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$MipsParse$stack.peek()).value;
		 
        List<Instruction> il = new ArrayList<Instruction>();
        il.add(e);
        RESULT = il;
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("inst_list",0, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inst_list ::= inst_list lbl_inst 
            {
              List<Instruction> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).right;
		List<Instruction> il = (List<Instruction>)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).value;
		int lblleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).right;
		Instruction lbl = (Instruction)((java_cup.runtime.Symbol) CUP$MipsParse$stack.peek()).value;
		
        il.add(lbl);
        RESULT = il;
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("inst_list",0, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lbl_inst ::= LABEL inst 
            {
              Instruction RESULT =null;
		int lblleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).right;
		String lbl = (String)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$MipsParse$stack.peek()).value;
		
        RESULT = new LabeledInstruction(lbl, i);
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("lbl_inst",2, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inst ::= OPCODE REGISTER COMMA REGISTER COMMA REGISTER 
            {
              Instruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-4)).right;
		Integer rd = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-4)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-2)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.peek()).value;
		 
        RESULT = new RType(op, rd, rs, rt); 
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inst ::= OPCODE REGISTER COMMA REGISTER COMMA INT 
            {
              Instruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-4)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-4)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-2)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.peek()).value;
		
        RESULT = new IType(op, rs, rt, imm);
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inst ::= OPCODE REGISTER COMMA INT LPAREN REGISTER RPAREN 
            {
              Instruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-6)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-6)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-5)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-3)).left;
		int immright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-3)).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).value;
		
        RESULT = new IType(op, rs, rt, imm);
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-6)), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inst ::= OPCODE INT 
            {
              Instruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.peek()).value;
		
        RESULT = new JType(op, imm);
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.elementAt(CUP$MipsParse$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inst ::= SYSCALL 
            {
              Instruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MipsParse$stack.peek()).value;
		
        RESULT = new RType(op, 0, 0, 0);
    
              CUP$MipsParse$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParse$stack.peek()), RESULT);
            }
          return CUP$MipsParse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MipsParse$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MipsParse$do_action(
    int                        CUP$MipsParse$act_num,
    java_cup.runtime.lr_parser CUP$MipsParse$parser,
    java.util.Stack            CUP$MipsParse$stack,
    int                        CUP$MipsParse$top)
    throws java.lang.Exception
    {
              return CUP$MipsParse$do_action_part00000000(
                               CUP$MipsParse$act_num,
                               CUP$MipsParse$parser,
                               CUP$MipsParse$stack,
                               CUP$MipsParse$top);
    }
}

}
